#include<iostream>
#include<stdio.h>
#include<vector>
#include<algorithm>
using namespace std;

#define SWAP(x,y,temp) ((temp)=(x), (x)=(y), (y=temp))

//병합정렬은 나누고 정렬했지만(병합시간이 대부분), 퀵정렬은 정렬 후 나눈다(분할시간이 대부분).
//피벗보다 작은 값은 모두 왼쪽 부분 리스트로, 큰 값은 오른쪽 부분 리스트로 옮긴다.
int partition(int list[], int left, int right) {
	int pivot, temp;
	int low, high;
	pivot = list[left];
	low = left + 1;
	high = right;
	while (low <= high) {
		//한번이라도 조건을 만족하지 않으면 조건문 탈출
		while (low <= right && list[low] <= pivot) {
			low++;
		}
		while (high >= left+1 && list[high] >= pivot) {
			high--;
		}
		//만약 low와 high가 교차하지 않았으면 list[low]를 list[high] 교환
		if (low < high) {
			SWAP(list[low], list[high], temp);
		}
	}
	SWAP(list[left], list[high], temp);
	return high;
}
//퀵정렬
void quickSort(int list[], int left, int right) {
	//기저사례:정렬할 데이터가 0~1개이다
	if (left >= right) return;
	//피벗을 기준으로 리스트를 분할
	else {
		int q = partition(list, left, right);//q: 피벗의 위치
		quickSort(list, left, q - 1);
		quickSort(list, q + 1, right);
	}
}
int main(void) {
	int i;
	int list[7] = { 38, 27, 43, 9, 3, 82, 10 };

	// 퀵 정렬 수행(left: 배열의 시작 = 0, right: 배열의 끝 = 8)
	quickSort(list, 0, 6);

	// 정렬 결과 출력
	for (i = 0; i < 7; ++i) {
		printf("%d\n", list[i]);
	}
}