//교차점은 알필요없고 접촉여부만 반환한다.
bool segmentIntersects(vector2 a, vector2 b, vector2 c, vector2 d) {
	double ab = ccw(a, b, c) * ccw(a, b, d);
	double cd = ccw(c, d, a) * ccw(c, d, b);
	//두 선분이 평행할때
	if (ab == 0 && cd == 0) {
		if (b < a)swap(a, b);
		if (d < c) swap(c, d);
		return !(b < c || d < a);
	}
	return ab <= 0 && cd <= 0;
}
//점 q가 다각형 p 안에 포함되어 있을 경우 참, 아닌 경우 거짓을 반환한다.
//q가 다각형의 경계 위에 있는 경우의 반환값은 정의되어있지 않다.
bool isInside(vector2 q, const vector<vector2>& p) {
	//오른쪽반직선이 홀수번 교차하면 내부, 짝수면 외부
	int crosses = 0;
	for (int i = 0; i < p.size(); ++i) {
		int j = (i + 1) % p.size();
		//p[i],p[j]가 반직선을 가로지르는가?
		if ((p[i].y > q.y) != (p[j].y > q.y)) {
			double atX = (p[i].x - p[j].x) / (p[i].y - p[j].y) * (q.y - p[i].y) + p[i].x;
			if (q.x < atX)
				++crosses;
		}
	}
	return crosses % 2 > 0;
}
typedef vector<vector2> polygon;
//points에 있는 점들을 모두 포함하는 최소의 볼록다각형을 찾는다(convex hull)
//볼록다각형이라 가장 왼쪽에 있는 벡터가 유일하게 정의된다.
polygon girfWrap(const vector<vector2>& points) {
	int n = points.size();
	polygon hull;
	//가장 왼쪽(아래)점은 볼록껍질에 반드시 포함되므로 첫빠따의 자격이있따.
	vector2 pivot = *min_element(points.begin(), points.end());
	hull.push_back(pivot);
	while (true) {
		//ph에서 시작하는 벡터가 가장 왼쪽인 점 next를 찾는다.
		//여러개 있으면 가장 먼 것을 선택한다.
		vector2 ph = hull.back(), next = points[0];
		for (int i = 1; i < n; ++i) {
			double cross = ccw(ph, next, points[i]);//양수면 next보다 points[i]가 더 왼쪽에 있다.
			double dist = (next - ph).norm() - (points[i] - ph).norm();//음수면 points[i]가 더 멀다.
			if (cross > 0 || (cross == 0 && dist < 0))
				next = points[i];
		}
		if (next == pivot) break;
		hull.push_back(next);
	}
	return hull;
}
//두 다각형이 겹치는지 여부를 반환한다.
//한점이라도 겹쳐선 안되기 때문에 isInside만으로 답을 구할순 없다.
bool polygonIntersects(const polygon& p, const polygon& q) {
	int n = p.size(), m = q.size();
	//완전포함관계인 경우 예외처리
	if (isInside(p[0], q) || isInside(q[0], p)) return true;
	//두 다각형이 서로 겹친다면 서로 닿는 두 변이 반드시 존재한다.
	//각각의 두 변중 한점이라도 겹치면 true반환
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j)
			if (segmentIntersects(p[i], p[(i + 1) % n], q[j], q[(j + 1) % m]))
				return true;
	}
	return false;
}