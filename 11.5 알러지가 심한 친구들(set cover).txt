#include<iostream>
#include<stdio.h>
#include<vector>
#include<algorithm>
#include<string>
#include<cassert>
#include<queue>
#include<memory.h>
using namespace std;
int n, m;
//eaters[food]=food를 먹을 수 있는 친구들의 번호
vector<int> eaters[50];
int best;
//food: 이번에 고려해야 할 음식의 번호
//edible: 지금까지 고른 음식 중 i번 친구가 먹을 수 있는 음식의 수
//chosen: 지금까지 고른 음식의 수
void slowSearch(int food, vector<int>& edible, int chosen) {
	//간단한 가지치기
	if (chosen >= best) return;
	//기저:모든 음식을 고려했을때, 
	//모든 친구가 음식을 먹을 수 있는 지 확인하고 최적해 갱신한다.
	if (food = m) {
		if (find(edible.begin(), edible.end(), 0) == edible.end())
			best = chosen;
		return;
	}
	//food를 만드는 경우
	for (int j = 0; j < eaters[food].size(); ++j) {
		int frnd = eaters[food][j];//food를 먹을 수 있는 친구의 번호
		edible[frnd]++;
	}
	slowSearch(food + 1, edible, chosen + 1);
	//불린 값으로 표현하면 edible[]을 바꿔뒀다 복구하기 어렵다.
	for (int j = 0; j < eaters[food].size(); ++j) {
		int frnd = eaters[food][j];
		edible[frnd]--;
	}
	//food를 만들지 않는 경우
	slowSearch(food + 1, edible, chosen);
}


//canEat[i]: i번 친구가 먹을 수 있는 음식의 집합
//eaters[i]: i번 음식을 먹을 수 있는 친구들의 집합
vector<int> canEat[50], eaters[50];
int best;
//음식이 없는 친구 한명이 먹을 수 있는 음식을 만드므로,
//slowSearch보다 빠르다.
void search(vector<int>& edible, int chosen) {
	//가지치기
	if (chosen >= best) return;
	//기저:먹을 음식이 없는 첫번째 친구를 찾고
	//만약 모든친구가 음식이 있는 경우 종료한다.
	int first = 0;
	while (first < n && edible[first]>0)++first;
	if (first == n) { best = chosen; return; }
	//first가 먹을 수 있는 음식을 하나 만든다.
	for (int i = 0; i < canEat[first].size(); ++i) {
		//first가 먹을수 있는 모든 음식을 한번씩 다 만드므로, 모든 사람이 음식을 먹을 수 있는 경우를
		//모두 다 탐색한다.
		int food = canEat[first][i];
		for (int j = 0; j < eaters[food].size(); ++j)
			edible[eaters[food][j]]++;
		search(edible, chosen + 1);
		for (int j = 0; j < eaters[food].size(); ++j)
			edible[eaters[food][j]]--;
	}
}