using namespace std;
#include<iostream>
#include<stdio.h>
#include<vector>
int a, b;
//주어진 칸을 덮을 수 있는 네 가지 방법
//블록을 구성하는 세 칸의 상대적 위치(dy,dx)의 목록(델타y,델타x)
const int coverType[4][3][2] = {
	{{0,0},{1,0},{0,1}},//(b)
	{{0,0},{0,1},{1,1}},//(c)
	{{0,0},{1,0},{1,1}},//(d)
	{{0,0},{1,0},{1,-1}}//(e)
};
//board의  (y,x)를 type번 방법으로 덮거나, 덮었던 블록을 없앤다.
//delta = 1 이면 덮고, -1 이면 덮었던 블록을 없앤다.
//만약 블록이 제대로 덮이지 않은 경우(게임판 밖으로 나가거나, 겹치거나, 검은 칸을 덮을 때)false를 반환한다.
bool set(vector<vector<int>>& board, int y, int x, int type, int delta) {
	bool ok = true;
	for (int i = 0; i < 3; ++i) {
		const int ny = y + coverType[type][i][0];
		const int nx = x + coverType[type][i][1];
		if (ny<0 || ny>=board.size() || nx < 0 || nx >= board[0].size())
			ok = false;
		//블록을 놓거나 치우는 역할, 블록을 놓을 수 있는지 판단하는 역할
		else if ((board[ny][nx] += delta) > 1)
			ok = false;//return false; 해버리면 나중에 덮었던 블록을 치울때 이미 있던 블록마저 치워 버리게 된다.
	}
	return ok;
}
//board의 모든 빈 칸을 덮을 수 있는 방법의 수를 반환한다.
//board[i][j] = 1 이미 덮인 칸 혹은 검은 칸
//board[i][j] = 0 아직 덮이지 않은 칸
int cover(vector<vector<int>>& board) {
	//채워지지않은 가장왼쪽윗칸을 찾는다
	int y = -1, x = -1;
	for (int i = 0; i < board.size(); ++i) {
		for (int j = 0; j < board[i].size(); ++j) {
			if (board[i][j] == 0) {
				y = i;
				x = j;
				break;
			}
		}
		if (y != -1) break;
	}
	//기저사례
	if (y == -1) return 1;
	int ret = 0;
	for (int type = 0; type < 4; ++type) {
		//board[y][x]를 type형태로 덮을 수 있으면 재귀 호출한다.
		if (set(board, y, x, type, 1)) {
			ret = ret + cover(board);
		}
		//덮었던 블록을 치운다
		set(board, y, x, type, -1);
	}
	return ret;
}
int main(void) {
	scanf("%d %d", &a, &b);
	vector<vector<int>> board(a, vector<int>(b));
	for (int i = 0; i < a; ++i) {
		string str;
		cin >> str;
		for (int j = 0; j < b; ++j) {
			if (str[j] == '#')
				board[i][j] = 1;
			else if (str[j] == '.')
				board[i][j] = 0;
		}
	}
	printf("%d", cover(board));
}