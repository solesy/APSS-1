#include<iostream>
#include<stdio.h>
#include<vector>
#include<algorithm>
using namespace std;
int n, capacity;
int volumn[100], need[100];
int cache[1001][100];
string name[100];
//케리어에 남은 용량이 capacity일때, item이후의 물건을
//담아 얻을 수 있는 최대 절박도의 합을 반환한다.
int pack(int capacity, int item) {
	//기저 : 더 담을 물건이 없을 때
	if (item == n) return 0;
	int& ret = cache[capacity][item];
	if (ret != -1) return ret;
	//이 물건을 담지않을경우
	ret = pack(capacity, item + 1);
	//이 물건을 담을 경우
	if (capacity >= volumn[item])
		ret = max(ret, pack(capacity - volumn[item], item + 1) + need[item]);
	return ret;
}
//pack(capacity,item)이 선택한 물건들의 목록을 picked에 저장한다.
void reconstruct(int capacity, int item, vector<string>& picked) {
	//기저 : 모든 물건을 다 고려함
	if (item == n) return;
	if (pack(capacity, item) == pack(capacity, item + 1)) {
		reconstruct(capacity, item + 1, picked);
	}
	else {
		picked.push_back(name[item]);
		reconstruct(capacity - volumn[item], item + 1, picked);
	}
}