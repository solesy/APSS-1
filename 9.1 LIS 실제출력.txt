int n;
int cache[101], S[100], choices[101];
//S[start]에서 시작하는 최대증가부분수열 길이를 반환한다.
int lis4(int start) {
	//start=-1인 경우때문에 start+1(걍 start라고 생각하셈, 재귀처럼 단순히 이해)
	int& ret = cache[start + 1];
	if (ret != -1) return ret;
	//항상 S[start]는 있기 때문에 길이는 최하 1
	ret = 1;
	int bestNext = -1;
	for (int next = start + 1; next < n; ++next) {
		if (start == -1 || S[start] < S[next]) {
			int cand = lis4(next) + 1;
			if (cand > ret) {
				ret = cand;
				bestNext = next;
			}
		}
	}
	//어떤 숫자를 다음 숫자로 선택해야 전체 증가 부분 수열의 길이를
	//최대화할 수 있을지를 기록
	choices[start + 1] = bestNext;
	return ret;
}
//S[start]에서 시작하는 LIS를 seq에 저장한다.
void reconstruct(int start, vector<int>& seq) {
	if (start != -1) seq.push_back(S[start]);
	//lis4에서 한칸씩 미뤄서 저장했다.
	int next = choices[start + 1];
	//lis4에서 bestNext를 -1로 초기화 했다.
	if (next != -1) reconstruct(next, seq);
}