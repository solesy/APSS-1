#include<iostream>
#include<stdio.h>
#include<vector>
#include<algorithm>
#include<string>
#include<cassert>
#include<queue>
#include<memory.h>
using namespace std;
struct point {
	double y, x;
};
//입력으로 주어진 볼록다각형
vector<point> hull1, hull2;
//위껍질, 아래껍질에 속하는 선분
//hull1,hull2중 어디에 속한지는 중요하지 않다.
vector<pair<point, point>> upper, lower;
//hull이 반시계방향으로 주어지므로, 인접한 두 점에 대해 x가
//증가하는 방향이면 아래쪽 껍질,x가 감소하는 방향이면 위쪽 껍질이다.
void decompose(const vector<point>& hull) {
	int n = hull.size();
	for (int i = 0; i < n; ++i) {
		//i=n-1일때, 0번이랑 비교
		if (hull[i].x < hull[(i + 1) % n].x)
			lower.push_back(make_pair(hull[i], hull[(i + 1) % n]));
		else if (hull[i].x > hull[(i + 1) % n].x)//수직선은 무시한다.
			upper.push_back(make_pair(hull[i], hull[(i + 1) % n]));
	}
}
double minX(const vector<point>& a) {
	double m = 987654321;
	for (int i = 0; i < a.size(); i++)
		m = min(m, a[i].x);
	return m;
}
double maxX(const vector<point>& a) {
	double m = -987654321;
	for (int i = 0; i < a.size(); i++)
		m = max(m, a[i].x);
	return m;
}
//정점a,b사이에 x가 있는지 확인한다.
bool between(const point& a, const point& b, double x) {
	return (a.x <= x && x <= b.x) || (b.x <= x && x <= a.x);
}
//정점a,b와 x가 교차하는 y좌표를 반환한다.
double at(const point& a, const point& b, double x) {
	double dy = b.y - a.y, dx = b.x - a.x;
	double gradient = dy / dx;
	return gradient * (x - b.x) + b.y;
}
//단면의 길이를 반환한다.
double vertical(double x) {
	double minUp = 987654321, maxLo = -987654321;
	for (int i = 0; i < upper.size(); ++i)
		if (between(upper[i].first, upper[i].second, x))
			minUp = min(minUp, at(upper[i].first, upper[i].second, x));
	for (int i = 0; i < lower.size(); ++i)
		if (between(lower[i].first, lower[i].second, x))
			maxLo = min(maxLo, at(lower[i].first, lower[i].second, x));
	return minUp - maxLo;
}
double solve() {
	//교집합의 좌표를 구하면 포함관계 예외
	//수직선이 두 다각형을 모두 만나는 x좌표의 범위를 구한다.
	//수직선이 교집합을 지나지 않는다면 vertical()은 음수를 반환하기 때문에 가능하다.
	double lo = max(minX(hull1), minX(hull2));
	double hi = min(maxX(hull1), maxX(hull2));
	//두 다각형이 좌우로 겹치지 않는 경우
	if (hi < lo) return 0;
	//삼분검색
	for (int iter = 0; iter < 100; ++iter) {
		double first = (2 * lo + hi) / 3;
		double second = (lo + 2 * hi) / 3;
		if (vertical(first) < vertical(second))
			lo = first;
		else
			hi = second;
	}
	//두 다각형이 상하로 겹치지 않는 경우
	return max(0.0, vertical(hi));
}