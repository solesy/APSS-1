#include<iostream>
#include<stdio.h>
#include<vector>
#include<algorithm>
#include<cassert>
using namespace std;
const int MAX = 1000000000 + 1;
int length[51];
//x,y를 i번 치환한 후의 길이
void precalc() {
	length[0] = 1;
	for (int i = 1; i <= 50; ++i)
		length[i] = min(MAX, 2 * length[i - 1] + 2);
}
const string EXPAND_X = "X+YF";
const string EXPAND_Y = "FX-Y";
//dragonCurve를 generations 진화시킨 결과에서 skip번 건너뛴 문자를 반환한다.
char expand(const string& dragonCurve, int generations, int skip) {
	//기저사례
	if (generations == 0) {
		assert(skip < dragonCurve.size());
		return dragonCurve[skip];
	}
	for (int i = 0; i < dragonCurve.size(); ++i) {
		//항상 답인 경우만 고른다.
		if (dragonCurve[i] == 'X' || dragonCurve[i] == 'Y') {
			if (skip >= length[generations])
				skip -= length[generations];
			else if (dragonCurve[i] == 'X')
				return expand(EXPAND_X, generations - 1, skip);
			else
				return expand(EXPAND_Y, generations - 1, skip);
		}
		//'+','-','F'인 경우도 건너뛰긴 해야한다.
		else if (skip > 0)
			--skip;
		//length[generations]를 빼고 답을 찾은 경우
		else
			return dragonCurve[i];
	}
}
int main(void) {
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	precalc();
	printf("%c", expand("FX", 2, 5));
}