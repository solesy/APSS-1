const int INF = 987654321;
string N;
//N[a...b] 구간의 난이도를 반환한다.
int classify(int a, int b) {
	//숫자 조각을 가져온다.
	string M = N.substr(a, b - a + 1);
	//모든 숫자가 같을 때
	if (M == string(M.size(), M[0])) return 1;
	//등차수열인지 검사한다.
	bool progressive = true;
	for (int i = 0; i < M.size() - 1; ++i)
		if (M[i + 1] - M[i] != M[1] - M[0])
			progressive = false;
	//등차수열이고 등차 d = 1,-1 이면 난이도는 2
	if (progressive && abs(M[1] - M[0]) == 1)
		return 2;
	//두 수가 번갈아 등장하는지 확인한다.
	bool alternating = true;
	for (int i = 0; i < M.size(); ++i)
		if (M[i] != M[i % 2])
			alternating = false;
	if (alternating) return 4;
	if (progressive) return 5;
	return 10;
}
int cache[10002];
int memorize(int begin) {
	//기저사례 : 배열의 끝에 도달
	if (begin == N.size()) return 0;
	//메모이제이션
	int& ret = cache[begin];
	if (ret != -1) return ret;
	ret = INF;
	for (int L = 3; L <= 5; ++L)
		if (begin + L <= N.size())//begin+L=N은 기저사례
			ret = min(ret, memorize(begin + L) + classify(begin, begin + L - 1));
	return ret;
}