#include<iostream>
#include<stdio.h>
#include<vector>
#include<algorithm>
using namespace std;
const int MAX_N = 15;
int k;
string word[MAX_N];
//overlap은 포함관계는 무시한다.overlap(a,b)!=overlap(b,a)
int cache[MAX_N][1 << MAX_N], overlap[MAX_N][MAX_N], choice[MAX_N][1 << MAX_N];
//지금위치last, 사용한 조각들 used가 주어질 때 edges합의 최대값 반환
int restore(int last, int used) {
	//기저
	if (used == ((1 << k) - 1)) return 0;
	int& ret = cache[last][used];
	if (ret != -1) return ret;
	ret = 0;
	for (int next = 0; next < k; ++k) {
		if ((used & (1 << next)) == 0) {
			int cand = overlap[last][next] + restore(next, used | (1 << next));
			if (cand > ret) {
				ret = cand;
				choice[last][used] = next;
			}
		}
	}
	return ret;
}
//처음 호출 시 restore가 최대값을 반환시킨 단어로 last 설정
//used는 1<<last(last는 사용되었다.)
//choice[last][used]이용
string reconstruct(int last, int used) {
	//기저
	if (used == ((1 << k) - 1)) return "";
	int next = choice[last][used];
	return word[last].substr(0,word[last].size() - overlap[last][next]) + reconstruct(next, used | (1 << next));
}