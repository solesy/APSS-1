#include<iostream>
#include<stdio.h>
#include<vector>
#include<algorithm>
#include<string>
#include<cassert>
#include<queue>
using namespace std;
const int INF = 987654321;
const double pi = 2.0 * acos(0);//cos(180/2)=0;
int n;
double y[100], x[100], r[100];
pair<double, double> ranges[100];
void convertToRange() {
	for (int i = 0; i < n; ++i) {
		//loc: 초소와 x축의 양의 방향과 이루는 각이고 범위는 0~2pi,
		//range: 초소가 감시할수 있는 범위와 성의 접점의 각이고 범위는 0~pi
		double loc = atan2(y[i], x[i]);
		loc = fmod(2 * pi + loc, 2 * pi);//atan2는 -pi~pi 반환하므로 0~2pi로 바꾼다.(일반각)
		double range = 2 * asin(r[i] / 16.0);//r>=0므로 0<=2*asin<=pi, 0<=range<=pi 같은범위이므로 더 손댈필요없다.
		ranges[i] = make_pair(loc - range, loc + range);
	}
	//각 구간을 시작 위치가 작은 것부터 오게끔 정렬한다.
	sort(ranges, ranges + n);
}
//[begin,end]을 덮기 위한 최소한의 구간 수를 반환한다.
int solveLinear(int begin, int end) {
	int used = 0, idx = 0;
	//원 내부만 감시할수 있으므로 begin<=end가 아니다.
	while (begin < end) {
		//begin이전에 시작하는 구간 중 가장 늦게 끝나는 구간을 찾는다.
		double maxCover = -1;
		while (idx < n && ranges[idx].first <= begin) {
			maxCover = max(maxCover, ranges[idx].second);
			++idx;
		}
		//더이상 덮을 수 없는 경우
		if (maxCover <= begin) return INF;
		//end<maxCover 일 때 while 탈출
		begin = maxCover;
		++used;
	}
	return used;
}
//0을 덮을 구간을 선택하고 나머지를 선형으로 푼다.
int solveCircular() {
	int ret = INF;
	convertToRange();
	//0이나 2pi을 덮을 구간을 선택한다.
	for (int i = 0; i < n; ++i) {
		if (ranges[i].first <= 0 || ranges[i].second >= 2 * pi) {
			double begin = ranges[i].second;
			begin = fmod(2 * pi + begin, 2 * pi);
			double end = ranges[i].first;
			end = fmod(2 * pi + end, 2 * pi);
			ret = min(ret, 1 + solveLinear(begin, end));
		}
	}
	return ret;
}