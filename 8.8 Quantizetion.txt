using namespace std;
const int INF = 987654321;
//A[]:양자화해야 할 수열, 정렬한 상태
//pSqSum[]:A[]제곱의 부분합을 저장한다.
int n;
int A[101], pSum[101], pSqSum[101];
//A를 정렬하고, 부분합을 계산한다.
void precalc() {
	sort(A, A + n);
	pSum[0] = A[0];
	pSqSum[0] = A[0] * A[0];
	for (int i = 1; i < n; ++i) {
		pSum[i] = pSum[i - 1] + A[i];
		pSqSum[i] = pSqSum[i - 1] + A[i] * A[i];
	}
}
int minError(int lo, int hi) {
	int sum = pSum[hi] - (lo == 0 ? 0 : pSum[lo - 1]);
	int sqSum = pSqSum[hi] - (lo == 0 ? 0 : pSqSum[lo - 1]);
	//평균을 반올림한 값으로 이 수들을 표현한다.
	int m = int(0.5 + (double)sum / (hi - lo + 1));
	int ret = sqSum - 2 * m * sum + m * m * (hi - lo + 1);
	return ret;
}
int cache[101][101];
int quantize(int from, int parts) {
	//기저 : 모든숫자들 전부 양자화, 묶을수 없을때
	if (from == n) return 0;
	if (parts == 0) return INF;
	int ret = INF;
	for (int partSize = 1; from + partSize <= n; ++partSize) {
		ret = min(ret, minError(from, from + partSize - 1) + quantize(from + partSize, parts - 1));
	}
	return ret;
}
int main(void) {
	int s;
	scanf("%d %d", &n, &s);
	for (int i = 0; i < n; ++i)
		scanf("%d", &A[i]);
	precalc();
	printf("%d", quantize(0, s));
}