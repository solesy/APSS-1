#include<iostream>
#include<stdio.h>
#include<vector>
#include<algorithm>
using namespace std;
const int M = 1000000000 + 100;
int skip;
int bino[201][201];
void calcBino() {
	memset(bino, 0, sizeof(bino));
	for (int i = 0; i <= 200; ++i) {
		bino[i][0] = bino[i][i] = 1;
		for (int j = 1; j < i; ++j)
			bino[i][j] = min(M, bino[i - 1][j - 1] + bino[i - 1][j]);
	}
}
//s:지금까지 만든 신호
//n:더 필요한 長点, m:더 필요한 短点
void generate(int n, int m, string s) {
	//기저:skip=k
	if (skip < 0) return;
	//기저:n=m=0
	if (n == 0 && m == 0) {
		if(skip==0) cout << s << endl;
		--skip;
		return;
	}
	//skip>=bino[n+m][n]일시, generate(n,m,s)는 답을 찾지못한 상태.
	//skip=skip-bino[n+m][n]
	if (bino[n + m][n] <= skip) {
		skip -= bino[n + m][n];
		return;
	}
	//장점을 먼저 고르고->재귀->단점을 고르고->재귀
	if (n > 0) generate(n - 1, m, s + "-");
	if (m > 0) generate(n, m - 1, s + "o");
}

//좀더 간단한 방법
//n:더 필요한 長点, m:더 필요한 短点 로 구성된 신호 중 skip개를 건너뛰고
//만들어지는 신호를 반환한다.
string kth(int n, int m, int skip) {
	if (n == 0) return string(m, 'o');
	if (m == 0) return string(n, '-');
	//시작이 '-'인 경우
	//'-'를 깔고 남은것들의 경우의 수가 skip보다 작아야한다.
	if (skip < bino[n + m - 1][n - 1])
		return "-" + kth(n - 1, m, skip);
	//첫글자가 'o'인 경우
	//'-'를 깔고 남은것들의 경우의 수가 skip보다 크거나같아야한다.
	return "o" + kth(n, m - 1, skip - bino[n + m - 1][n - 1]);
}