#include<iostream>
#include<stdio.h>
#include<vector>
#include<algorithm>
#include<string>
#include<cassert>
#include<queue>
#include<memory.h>
using namespace std;
//K는 10억까지 늘어나므로 모든 표지판을 정렬하는 단순한
//알고리즘은 불가능하다. 따라서 구간을 정하여 그 구간 사이에
//몇개의 표지판이 오는지 알아내는 작업은 필수적이다.
int n, k;
int l[5001], m[5001], g[5001];
//[0,x]까지 k개 이상 표지판을 볼 수 있는가?
bool decision(int x) {
	int ret = 0;
	for (int i = 1; i <= n; ++i)
		if (x >= l[i] - m[i])
			ret += (min(x,l[i]) - (l[i] - m[i])) / g[i] + 1;
	return ret >= k;
}
//k번째 표지판의 좌표를 반환한다.
int optimize() {
	int lo = 0, hi = 8030000;
	while (lo < hi) {
		int mid = (lo + hi) / 2;
		if (lo == mid) break;
		if (decision(mid))
			hi = mid;
		else
			lo = mid;
	}
	return hi;
}